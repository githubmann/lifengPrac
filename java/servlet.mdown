##Servlet###

* [Quick start](#fenxi)

###路径###
- /servlet/HelloServlet 第一个/表示服务器根目录
- href="<%request.getContextPath()%>/servlet/HelloServlet" request.getContextPath获取上下文路径，其实表示项目的根目录
```java
    <url-pattern>/servlet/HelloServlet<url-pattern>
    <url-pattern>servlet/HelloServlet<url-pattern>
```
- 我发现/开头必定是根目录，另外，java里面的开发，路径会忽略文件夹。
遇到的问题是第一个成功加载，第二个无法加载

###获取初始化参数###
```
    <init-param>
        <param-name>username<param-name>
        <param-value>admin<param-value>
    <init-param>
```
在servlet中可以使用config调用这些初始化参数，例如使用config.getInitParameter("username");

###包###
- 默认情况下,servlet应用程序位于<Tomcat-installation-directory>/webapps/ROOT/WEB-INF/classes中，为编译后的字节码。例如:com.myorg.MainServlet位于 WEB-INF/classes/com/myorg/MainServlet.class

###利用相应的包开发一个可以发送电子邮件的模块
- 利用这两个包：javaMail API(mail.jar)和JAF(java activation framwork,下的activation.jar包)
- [相关知识的wiki](http://wiki.jikexueyuan.com/project/servlet/sending-email.html)

#使用Servlet开发一个购物测试#

###分析

- 购买商品集合
- 添加，删除商品，计算价格

###代码结构
- **entity**: 缠扎了业务逻辑
    ```java
        public class Cart{
            private HashMap<Items,Integer> goods;//定义商品结构
            private double totalPrivce//总价格
            //构造方法
            publc Cart(){
                goods = new HashMap<Items,Integer>();
                totalPrice = 0;
            }
            //getter setter方法 这里省略
            //添加商品进购物测方法
            public boolean addGoodsFromCart(Item item){
                //如何保证不添加重复商品
                if(goods.containsKey(item)){
                    goods.put(item.goods.get(item)+number);

                }else{
                    goods.put(item,number):
                }
                CallTotalPrice();
                return true;
            }
            public boolean removeGoodsFromCart(Items item){
                goods.remove(item);
                calTotalPrice()；//重新计算购物车的总金额
                return true;
            }
            public double calTotalPrice(){
                double sum = 0.0;
                Set<Items> key = goods.keySet();//获得键集合
                Iterator it = keys.iterator();//获得迭代器对象
                while(it.hasNext()){
                    Item i = it.next();
                    sum+=i.getPrice()*goods.get(i);
                }

                this.setTotalPrice(sum);
            }
            //测试购物车类
            public static void main(String[] arg){
                Item il = new Item(1,"沃特篮球鞋","温州",200,500,"001.jpg");
                Item i2 = new Item(2,"李宁篮球鞋","广州",300,500,"002.jpg");

                Cart c = new Cart();
                c.addGoodsInCart(i1.1):
                c.addGoodsInCart(i2,1)
                //变量购买商品的集合
                Set<Map.Entry<Item,Inter
                System.out.println();
        }
    ```
- 如何保证不添加重复商品：将改写hashCode和equals将同一个商品的购买信息放在同一个内存地址中,主要用**goods.containsKey(item)**来判断是否是同一个商品（这里说的是同种类型商品不同次购买）

    ```java
        //改写Item的hashcode()方法
        public int hashCde(){
            return this.getId()+this.getName().hashCode():
        }
        //改写equals方法
        public boolean equals(Object obj){
            if(this==obj){
                return true;
            }
            if(obj instanceof Item){
                Item i = (item)obj;
                if(this.getId()==i.getId()&&this.getName()==i.getName()){
                    return true;
                }else{
                    retur false;
                }
            }else{
                return false;
            }
        }
    ```